import { generateValidationItemHelper } from '../../../../src/generates/generate-class/helpers';
import { IColumn } from '../../../../src/interfaces';

describe('Generate Validation Item Helper', () => {
  it('Should return validation for string type', () => {
    const columns: IColumn  = {
      name: 'ANY_NAME',
      required: true,
      type: 'string',
      autoGenerated: true,
    };

    const result = generateValidationItemHelper(columns, 'throw new BadRequest("{{prop}}")');
    expect(result).toStrictEqual('if (!this.props.ANY_NAME || typeof this.props.ANY_NAME !== "string") {throw new BadRequest("ANY_NAME")}');
  });

  it('Should return validation for number type', () => {
    const columns: IColumn  = {
      name: 'ANY_NAME',
      required: true,
      type: 'number',
      autoGenerated: true,
    };

    const result = generateValidationItemHelper(columns, 'throw new BadRequest("{{prop}}")');
    expect(result).toStrictEqual('if (!this.props.ANY_NAME || typeof this.props.ANY_NAME !== "number") {throw new BadRequest("ANY_NAME")}');
  });

  it('Should return validation for date type', () => {
    const columns: IColumn  = {
      name: 'ANY_NAME',
      required: true,
      type: 'date',
      autoGenerated: true,
    };

    const result = generateValidationItemHelper(columns, 'throw new BadRequest("{{prop}}")');
    expect(result).toStrictEqual('if (!this.props.ANY_NAME || !(this.props.ANY_NAME instanceof Date)) {throw new BadRequest("ANY_NAME")}');
  });

  it('Should return validation for uuid type', () => {
    const columns: IColumn  = {
      name: 'ANY_NAME',
      required: true,
      type: 'uuid',
      autoGenerated: true,
    };

    const result = generateValidationItemHelper(columns, 'throw new BadRequest("{{prop}}")');
    expect(result).toStrictEqual('if (!this.props.ANY_NAME || typeof this.props.ANY_NAME !== "string") {throw new BadRequest("ANY_NAME")}');
  });

  it('Should return validation for boolean type', () => {
    const columns: IColumn  = {
      name: 'ANY_NAME',
      required: true,
      type: 'boolean',
      autoGenerated: true,
    };

    const result = generateValidationItemHelper(columns, 'throw new BadRequest("{{prop}}")');
    expect(result).toStrictEqual('if (!this.props.ANY_NAME || typeof this.props.ANY_NAME !== "boolean") {throw new BadRequest("ANY_NAME")}');
  });
});
